"use strict";
var Promise = require('bluebird');
var async = require('async');
var modbus_eastron_1 = require("modbus-eastron");
var aftertimesync_1 = require("aftertimesync");
var ModEastronKernel = (function () {
    function ModEastronKernel() {
        this.devices = [];
    }
    ModEastronKernel.prototype.addDevices = function (devices) {
        if (!devices || !devices.length || !devices[0].id) {
            throw Error('wrong devices config for kernel modbus eastron');
        }
        else {
            for (var i = 0; i < devices.length; i++) {
                this.addDevice(devices[i]);
            }
        }
    };
    ModEastronKernel.prototype.addDevice = function (device) {
        if (!device || !device.id) {
            throw Error('wrong device conf for kernel modbus eastron');
        }
        else {
            this.devices.push(device);
        }
    };
    ModEastronKernel.prototype.loop = function (callback, o) {
        var _this = this;
        if (!_this.activeloop) {
            function looping() {
                var interval = 300000;
                if (o && o.interval)
                    interval = o.interval;
                function cycle() {
                    _this.activeloop = setInterval(function () {
                        this.data().then(function (a) {
                            callback(a);
                        }).catch(function (err) {
                            console.error(err);
                        });
                    }, interval);
                }
                this.data().then(function (a) {
                    callback(a);
                    cycle();
                }).catch(function (err) {
                    console.error(err);
                    cycle();
                });
            }
            if (o && o.checkTime) {
                aftertimesync_1.default().then(function () {
                    looping();
                }).catch(function (err) {
                    console.error(err);
                    throw Error(err);
                });
            }
            else {
                looping();
            }
        }
        else {
            throw Error('you must close the actual loop before start another');
        }
    };
    ModEastronKernel.prototype.loopStop = function () {
        var _this = this;
        if (_this.activeloop) {
            clearInterval(_this.activeloop);
            return 'ok';
        }
        else {
            return 'no loop are running';
        }
    };
    ModEastronKernel.prototype.data = function () {
        var devices = this.devices;
        return new Promise(function (resolve, reject) {
            var answer = [];
            async.eachSeries(devices, function (device) {
                modbus_eastron_1.default(device).then(function (a) {
                    answer.push(a);
                }).catch(function (err) {
                    console.error(err);
                });
            }, function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(answer);
                }
            });
        });
    };
    return ModEastronKernel;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ModEastronKernel;

//# sourceMappingURL=data:application/json;base64,
